{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///Users/goldtome/Desktop/mothership/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["// app/api/auth/[...nextauth]/route.js\nimport NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport axios from \"axios\";\n\nconst authOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"WordPress\",\n      credentials: {\n        username: { label: \"Username\", type: \"text\", placeholder: \"yourusername\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        try {\n          const response = await axios.post(\n            \"https://mothership.wordifysites.com/wp-json/jwt-auth/v1/token\",\n            {\n              username: credentials.username,\n              password: credentials.password,\n            }\n          );\n\n          console.log(\"WordPress API Response:\", response.data);\n\n          if (response.data && response.data.token) {\n            return {\n              id: response.data.user_id,\n              username: response.data.user_nicename,\n              email: response.data.user_email,\n              token: response.data.token,\n            };\n          } else {\n            console.error(\"Invalid login attempt:\", response.data);\n            throw new Error(\"Invalid username or password\");\n          }\n        } catch (error) {\n          console.error(\"Authentication failed:\", error.response?.data || error.message);\n          throw new Error(\"Authentication failed. Check server logs.\");\n        }\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.username = user.username;\n        token.email = user.email;\n        token.token = user.token;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      session.user = {\n        id: token.id,\n        username: token.username,\n        email: token.email,\n        token: token.token,\n      };\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/login\",\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  session: {\n    strategy: \"jwt\",\n  },\n};\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":"AAAA,sCAAsC;;;;;AACtC;AACA;AACA;;;;AAEA,MAAM,cAAc;IAClB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,UAAU;oBAAE,OAAO;oBAAY,MAAM;oBAAQ,aAAa;gBAAe;gBACzE,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CAC/B,iEACA;wBACE,UAAU,YAAY,QAAQ;wBAC9B,UAAU,YAAY,QAAQ;oBAChC;oBAGF,QAAQ,GAAG,CAAC,2BAA2B,SAAS,IAAI;oBAEpD,IAAI,SAAS,IAAI,IAAI,SAAS,IAAI,CAAC,KAAK,EAAE;wBACxC,OAAO;4BACL,IAAI,SAAS,IAAI,CAAC,OAAO;4BACzB,UAAU,SAAS,IAAI,CAAC,aAAa;4BACrC,OAAO,SAAS,IAAI,CAAC,UAAU;4BAC/B,OAAO,SAAS,IAAI,CAAC,KAAK;wBAC5B;oBACF,OAAO;wBACL,QAAQ,KAAK,CAAC,0BAA0B,SAAS,IAAI;wBACrD,MAAM,IAAI,MAAM;oBAClB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,0BAA0B,MAAM,QAAQ,EAAE,QAAQ,MAAM,OAAO;oBAC7E,MAAM,IAAI,MAAM;gBAClB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,QAAQ,GAAG,KAAK,QAAQ;gBAC9B,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,KAAK,GAAG,KAAK,KAAK;YAC1B;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,IAAI,GAAG;gBACb,IAAI,MAAM,EAAE;gBACZ,UAAU,MAAM,QAAQ;gBACxB,OAAO,MAAM,KAAK;gBAClB,OAAO,MAAM,KAAK;YACpB;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,SAAS;QACP,UAAU;IACZ;AACF;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}